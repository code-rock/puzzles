// Дана последовательность чисел: 2,4,6,8,10.
// Найти сумму их квадратов(22+32+42….) с использованием
// конкурентных вычислений.

package main

import (
	"fmt"
)

// Создание функции с передоваемым агрументом ns - массив целых чисел
func Square(ns []int) []int {
	// Создание целочисленного пустого канала
	pows := make(chan int)

	// Итерация по всем элементам масива целых чисел
	for _, value := range ns {
		// Самовызывающаяся горутина, куда аргументом явно передается целое число
		go func(n int) {
			// Возведение числа в квадрат и запись в канал результата
			pows <- n * n
		}(value)
	}

	// Cоздание пустова масива для записи степеней
	powArr := []int{}
	// Проходим по всей длене массива чисел
	for i := 0; i < len(ns); i++ {
		// Читаем одно значение из канала и записываем в массив
		append(powArr, <-pows)
	}
	// Возвращает из функции готовый масив степеней
	return powArr
}

// Небось, есть реализованная в одной библиотек.. поискать!
// Дженерик имеет два незаданных типа для значения итерируемого массива и выходного значения
// Первым аргументом Reduce передается итерируемый массив
// Вторым аргументом функция Reduce принимающая два аргумента на вход. Первым рузультат выполнения прошлой
// итерации. Вторым текщее значение элемента в цикле. На выход возвращает значение для следущей итерации.
// Третим аргументом в функцию Reduce передается начальное значение, используемое для первой итерации
func Reduce[T, M any](s []T, f func(M, T) M, initValue M) M {
	// Создание переменной для хранения промежуточного значения вычеслений
	acc := initValue
	// Перебор элементов массива
	for _, v := range s {
		// Выполнение переданной вторым аргументом функции и запись результата в переменную для хранения
		// промежуточного состояния
		acc = f(acc, v)
	}
	// После завершения цикла результат всех вычислений возвращается из функции
	return acc
}

// Функция принимает 2 целых числа и воращает их сумму целым числом
func Sum(a int, b int) int {
	return a + b
}

func main() {
	// Создание масива целых чисел
	ns := []int{2, 3, 8, 12, 54, 1, 0}
	// Вызов функции возведения в квадрат
	pows := Square(ns)
	// Сложение элементов массива
	sum := Reduce(pows, Sum, 0)
	// Вывод суммы в консоль
	fmt.Printf("%d", sum)
}
